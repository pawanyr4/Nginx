# Sample nginx config to
# Deny css, jpg, jpeg, js, json, png, mp4, pdf
# Custom log handler
# Add security headers only if not present on upstream

#user  nobody;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    # Set the custom log format
    log_format custom '$time_local '
    'nginx/$nginx_version '
    '$remote_addr '
    '$request_id '
    '$status '
    '$body_bytes_sent '
    '"$http_user_agent" '
    '$proxy_protocol_addr '
    '$server_name '
    '$upstream_addr '
    '$request_time '
    '$upstream_connect_time '
    '$upstream_header_time '
    '$upstream_response_time '
    '"$request_uri" '
    '$upstream_status '
    '$ssl_session_reused '
    '"$http_x_forwarded_for"';

    # Use the custom log format defined above for access logs
    # access_log logs/access.log custom;
    # For testing the container it needs to use stdout
    # comment this and uncomment the above access log for file based.
    access_log /dev/stdout custom;

    sendfile on;
    keepalive_timeout 65;

    # We define a list of the security headers we want to
    # set, only if they are not already set by the upstream.
    # This is done using a map and works by setting the value
    # only if the upstream header is empty.
    include "security-headers-map.conf";

    server {
        listen 80;
        # Set the default server name
        server_name _;
        # Set the default root
        root /usr/share/nginx/html;

        # Return a 404 for specified file types
        location ~* \.(css|jpg|jpeg|js|json|png|mp4|pdf)$ {
            return 404;
        }

        # Send everything else to the upstream
        location / {
            # Add headers if not set by upstream
            add_header Strict-Transport-Security $hsts_header;
            add_header X-Content-Type-Options $xcto_header;
            add_header X-XSS-Protection $xxssprotection_header;
            add_header X-Frame-Options $xframeoptions_header;
            add_header Content-Security-Policy $csp_header;
            add_header Access-Control-Allow-Credentials $acac_header;

            # proxy to upstream
            # this is going to the upstream-server container for testing
            proxy_set_header Host $host;
            proxy_pass http://upstream-server:3000;
        }
    }
}
